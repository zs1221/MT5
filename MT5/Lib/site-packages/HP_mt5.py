# -*- coding: utf-8 -*-
#软件信息
p_sname='小白量化3模块'  #模块名称
p_aname='独狼'     #模块作者
p_edate='20201031'  #模块最后修改日期
p_ver=1.02   #模块最新版本

from datetime import datetime
import MetaTrader5 as mt5
import numpy as np
import matplotlib.pyplot as plt
import time
from datetime import datetime
import pandas as pd
import talib
import datetime

global pver,__version__
pver=p_ver
__version__=mt5.__version__

global  positions_df,positions_total2
#positions_df=pd.DataFrame(columns=['A', 'B', 'C', 'D'])
positions_df=None
positions_total2=0
symbol = "XAUUSD"

pd.set_option('display.max_columns', 500) # number of columns to be displayed
pd.set_option('display.width', 1500)      # max table width to display

#建立与MetaTrader 5程序端的连接。
def init(**kw):
    return mt5.initialize(**kw)

def initialize(**kw):
    return mt5.initialize(**kw)

def login(login,password,server,timeout):
    return mt5.login(login,password=password,server=server,timeout=timeout)

# 断开与MetaTrader 5程序端的连接
def shutdown():
    mt5.shutdown()

#返回MetaTrader 5程序端版本。
def version():
    return mt5.version()

#返回最后一个错误的数据。
def last_error():
    return mt5.last_error()

#获取已连接的MetaTrader 5客户端的状态和设置。
def terminal_info():
    return mt5.terminal_info()

#获取MetaTrader 5程序端中所有交易品种的数量。
def symbols_total():
    return mt5.symbols_total()

#获取MetaTrader 5程序端中的所有交易品种。
def symbols_get(**kw):
    return mt5.symbols_get(**kw)

#获取指定交易品种的数据。
def symbol_info(symbol="XAUUSD"):
    return mt5.symbol_info(symbol)

#获取指定交易品种的最后报价。
def symbol_info_tick(symbol="XAUUSD"):    
    return mt5.symbol_info_tick(symbol)


#在MarketWatch（市场报价）窗口中选择一个交易品种或从该窗口移除一个交易品种。
def symbol_select(symbol="XAUUSD",enable=True):
    return mt5.symbol_select(symbol,enable)

'''
TIMEFRAME 是一个包含可能图表周期值的枚举
ID	         描述
TIMEFRAME_M1	1分钟
TIMEFRAME_M2	2 分钟
TIMEFRAME_M3	3 分钟
TIMEFRAME_M4	4 分钟
TIMEFRAME_M5	5 分钟
TIMEFRAME_M6	6 分钟
TIMEFRAME_M10	10 分钟
TIMEFRAME_M12	12 分钟
TIMEFRAME_M12	15 分钟
TIMEFRAME_M20	20 分钟
TIMEFRAME_M30	30 分钟
TIMEFRAME_H1	1 小时
TIMEFRAME_H2	2 小时
TIMEFRAME_H3	3 小时
TIMEFRAME_H4	4 小时
TIMEFRAME_H6	6 小时
TIMEFRAME_H8	8 小时
TIMEFRAME_H12	12 小时
TIMEFRAME_D1	1 天
TIMEFRAME_W1	1 周
TIMEFRAME_MON1	1 个月
'''
#从指定日期开始从MetaTrader 5程序端获取柱形图。
def copy_rates_from(symbol,timeframe,date_from,count):
    return mt5.copy_rates_from(symbol,timeframe,date_from,count)


#从指定索引开始从MetaTrader 5程序端获取柱形图。
def copy_rates_from_pos(symbol,timeframe, start_pos,count):
    return mt5.copy_rates_from_pos(symbol,timeframe, start_pos,count)
    
#从MetaTrader 5程序端获取指定日期范围内的柱形图。
def copy_rates_range(symbol,timeframe,date_from,date_to):
    return mt5.copy_rates_range(symbol,timeframe,date_from,date_to)

#从指定日期开始从MetaTrader 5程序端获取报价。
def copy_ticks_from(symbol,date_from,count,flags):
    return mt5.copy_ticks_from(symbol,date_from,count,flags)

#从MetaTrader 5程序端获取指定日期范围内的报价。
def copy_ticks_range(symbol,date_from,date_to,flags):
    return mt5.copy_ticks_range(symbol,date_from,date_to,flags)

#从MetaTrader 5程序端获取指定日期范围内的报价。
def orders_get(**kw):
    return mt5.orders_get(**kw)

#获取未结持仓的数量。
def positions_total():
    return mt5.positions_total()


#def reload_positions2(**kw):   
#    global  positions_df,positions_total2
#    #持仓订单列表
#    positions=mt5.positions_get(**kw)
#    #print('订单:',positions)
#    if positions==None or positions==():
#        positions_df=None
#        positions_total2=0
#    else:
#        df=pd.DataFrame(list(positions),columns=positions[0]._asdict().keys())
#        df=df.sort_values(by='profit',ascending=False)
#        #df.drop(['time_update', 'time_msc', 'time_update_msc', 'external_id'], axis=1, inplace=True)
#        df['datetime']=[time.strftime("%Y--%m--%d %H:%M:%S", time.localtime(x)) for x in df.time.astype(int)]
#        df=df.reset_index(level=None, drop=True ,col_level=0, col_fill='')
#        positions_df=df.copy()
#        positions_total2=len(df)
#    return positions_total2


#获取可通过交易品种或单号筛选的未结持仓。共有三个调用选项。
def positions_get(**kw):
    return mt5.positions_get(**kw)

#获取交易历史中指定时间间隔内的交易数量。
def history_deals_total(date_from,date_to):
    return history_deals_total(date_from,date_to)

#获取可通过单号或持仓筛选的指定时间间隔内的交易历史中的交易。
def history_deals_get(**kw):
    return mt5.history_deals_get(**kw)

#获取交易历史中指定时间间隔内的订单数量。
def history_orders_total(date_from,date_to):
    return mt5.history_orders_total(date_from,date_to)

#获取可通过单号或持仓筛选的交易历史中的订单。共有三个调用选项。
def history_orders_get(**kw):
    return mt5.history_orders_get(**kw)

# 显示有关连接状态、服务器名称和交易账户的数据
def info():
    # 显示有关MetaTrader 5程序包的数据
    print('显示有关MetaTrader 5程序包的数据')
    print("MetaTrader5 package author: ",mt5.__author__)
    print("MetaTrader5 package version: ",mt5.__version__)
    # 显示有关连接状态、服务器名称和交易账户的数据
    print('# 显示有关连接状态、服务器名称和交易账户的数据')
    print(mt5.terminal_info())
    # 显示有关MetaTrader 5版本的数据
    print('# 显示有关MetaTrader 5版本的数据')
    print(mt5.version())

# 建立MetaTrader 5到指定交易账户的连接
def login(login,server,password):
    # 建立MetaTrader 5到指定交易账户的连接
    if not mt5.initialize(login=login, server=server,password=password):
        print("initialize() failed, error code =",mt5.last_error())

#获取当前交易账户的信息。
def account_info():
    return mt5.account_info()


def reload_positions(symbol="XAUUSD"):
    global  positions_df,positions_total
    positions_total=mt5.positions_total()
    if positions_total==0:
        return None
    #持仓订单列表
    positions=mt5.positions_get(symbol=symbol)
    if len(positions)==0:
        positions_df=pd.DataFrame(columns=['A', 'B', 'C', 'D'])
        return None
    print('订单数:',len(positions))

    #position_dict=positions[0]._asdict()
    #print(position_dict)
    
    #将订单转化为DataFrame
    df=pd.DataFrame(list(positions),columns=positions[0]._asdict().keys())
    df=df.sort_values(by='profit',ascending=False)
    df.drop(['time_update', 'time_msc', 'time_update_msc', 'external_id'], axis=1, inplace=True)
    df=df.reset_index(level=None, drop=True ,col_level=0, col_fill='')
    positions_df=df.copy()
    return positions_df


def reload_positions2(**kw):   
    global  positions_df,positions_total
    #持仓订单列表
    positions=mt5.positions_get(**kw)
    #print('订单:',positions)
    if positions==None or positions==():
        positions_df=()
        positions_total=0
    else:
        df=pd.DataFrame(list(positions),columns=positions[0]._asdict().keys())
        df=df.sort_values(by='profit',ascending=False)
        df.drop(['time_update', 'time_msc', 'time_update_msc', 'external_id'], axis=1, inplace=True)
        df['datetime']=[time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(x-2*60*60)) for x in df.time.astype(int)]
        df=df.reset_index(level=None, drop=True ,col_level=0, col_fill='')
        positions_df=df.copy()
        positions_total=len(df)
    return positions_df

    
def get_positions_df(**kw):
    global  positions_df,positions_total
    #持仓订单列表
    positions=mt5.positions_get(**kw)
    #print('订单:',positions)
    if positions==None or positions==():
        positions_df=()
        positions_total=0
    else:
        df=pd.DataFrame(list(positions),columns=positions[0]._asdict().keys())
        df=df.sort_values(by='profit',ascending=False)
        df.drop(['time_update', 'time_msc', 'time_update_msc', 'external_id'], axis=1, inplace=True)
        df=df.reset_index(level=None, drop=True ,col_level=0, col_fill='')
        positions_df=df.copy()
        positions_total=len(df)
    return positions_df


def save_positions(file):
    global  positions_df,positions_total
    positions_df.to_csv(file, encoding= 'gbk')


def load_positions(file):
    global  positions_df,positions_total
    positions_df=pd.read_csv(file , encoding= 'gbk')

def add_positions(ticket=0,dtime=0,type=0,magic=0,identifier=0,reason=3, \
                  volume=0.01, price_open=0.0,sl=0.0,tp=0.0,price_current=0.0, \
                  swap=0.0,profit=0.0,symbol='XAUUSD',comment=''):
    global  positions_df,positions_total
    l=len(positions_df)
    # 新插入的行一定要加 index,不然会报错
    positions_df.loc[l] = [ticket,dtime,type,magic,identifier,reason,volume, \
                   price_open,sl,tp,price_current,swap,profit,symbol,comment]
    positions_total=len(positions_df)
    
def del__positions(index):
    global  positions_df,positions_total
    positions_df=positions_df.drop(index)
    positions_total=len(positions_df)

def del__positions2(ticket=0):
    global  positions_df,positions_total
    positions_df=positions_df[positions_df['ticket']==ticket]
    positions_total=len(positions_df)


def find_id(id=0):
    global  positions_df,positions_total
    positions_total=mt5.positions_total()
    if positions_total==0:
        return None
    mypos=positions_df[positions_df['identifier']==id]
    #print(mypos)
    return mypos

def find_id2(comment=""):
    global  positions_df,positions_total
    if comment=="":
        return None
    positions_total=mt5.positions_total()
    if positions_total==0:
        return None
    mypos=positions_df[positions_df['comment']==comment]
    print(mypos)
    return mypos



def get_id(i=0):
    global  positions_df,positions_total
    positions_total=mt5.positions_total()
    if positions_total==0:
        return -1
    df2=positions_df.iloc[[i]]  #H获取第几条记录
    #print(df2)
    id2=-1
    if len(df2)>0:
        id2=positions_df.loc[i,'ticket']
    return id2


def get_id2(comment=""):
    global  positions_df,positions_total
    if comment=="":
        return -1
    positions_total=mt5.positions_total()
    if positions_total==0:
        return -1
    mypos=positions_df[positions_df['comment']==comment]
    mypos=mypos.reset_index(level=None, drop=True ,col_level=0, col_fill='')
    id2=-1
    if len(mypos)>0:
        id2=mypos.loc[0,'ticket']
        print(id2)
    return id2    


def buy(symbol = "XAUUSD",volume=0.01,xsl=-99999,xtp=-99999,magic=0,sl=-99999,tp=-99999, \
        comment="python script open buy"):
    price = mt5.symbol_info_tick(symbol).ask
    print ("多单买入价：",price) 
    deviation = 30        
    request = { 
    "action": mt5.TRADE_ACTION_DEAL, 
    "symbol": symbol, 
    "volume": volume, 
    "type": mt5.ORDER_TYPE_BUY, 
    "price": price, 
    "deviation": 50, 
    "magic": magic, 
    "comment": comment, 
    "type_time": mt5.ORDER_TIME_GTC, 
    "type_filling": mt5.ORDER_FILLING_IOC,} 
    if sl != -99999:
         request['sl']=sl
    if tp != -99999:
         request['tp']=tp    
    if xsl != -99999:
         request['sl']=price-xsl
    if xtp != -99999:
         request['tp']=price+xtp      
    result = mt5.order_send(request)
    reload_positions2(symbol=symbol)
    return result 

def buyx(price,symbol = "XAUUSD",volume=0.01,sl=-99999,tp=-99999,magic=0, \
        comment="python script open buy"):
    #price = mt5.symbol_info_tick(symbol).ask
    print ("多单买入限价：",price) 
    deviation = 30        
    request = { 
    "action": mt5.TRADE_ACTION_PENDING, 
    "symbol": symbol, 
    "volume": volume, 
    "type": mt5.ORDER_TYPE_BUY_LIMIT, 
    "price": price, 
    "deviation": 50, 
    "magic": magic, 
    "comment":comment, 
    "type_time": mt5.ORDER_TIME_GTC, 
    "type_filling": mt5.ORDER_FILLING_IOC,} 
    if sl != -99999:
         request['sl']=sl
    if tp != -99999:
         request['tp']=tp         
    result = mt5.order_send(request)
    reload_positions2(symbol=symbol)
    return result 

def buy_limit(price,symbol = "XAUUSD",volume=0.01,sl=-99999,tp=-99999,magic=0, \
        comment="python script open buy"):
    #price = mt5.symbol_info_tick(symbol).ask
    print ("多单买入限价：",price) 
    deviation = 30        
    request = { 
    "action": mt5.TRADE_ACTION_PENDING, 
    "symbol": symbol, 
    "volume": volume, 
    "type": mt5.ORDER_TYPE_BUY_LIMIT, 
    "price": price, 
    "deviation": 50, 
    "magic": magic, 
    "comment": comment, 
    "type_time": mt5.ORDER_TIME_GTC, 
    "type_filling": mt5.ORDER_FILLING_IOC,} 
    if sl != -99999:
         request['sl']=sl
    if tp != -99999:
         request['tp']=tp         
    result = mt5.order_send(request)
    reload_positions2(symbol=symbol)
    return result 

def sell(symbol = "XAUUSD",volume=0.01,xsl=-99999,xtp=-99999,magic=0,sl=-99999,tp=-99999, \
        comment="python script opensell"):
    price = mt5.symbol_info_tick(symbol).bid
    print ("空单卖出价：",price) 
    deviation = 30        
    request = { 
    "action": mt5.TRADE_ACTION_DEAL, 
    "symbol": symbol, 
    "volume": volume, 
    "type": mt5.ORDER_TYPE_SELL, 
    "price": price, 
    "deviation": 50, 
    "magic": magic, 
    "comment": comment, 
    "type_time": mt5.ORDER_TIME_GTC, 
    "type_filling": mt5.ORDER_FILLING_IOC,}
    if sl != -99999:
         request['sl']=sl
    if tp != -99999:
         request['tp']=tp           
    if xsl != -99999:
         request['sl']=price+xsl
    if xtp != -99999:
         request['tp']=price-xtp         
    result = mt5.order_send(request)
    reload_positions2(symbol=symbol)
    return result 


def sellx(price,symbol = "XAUUSD",volume=0.01,sl=-99999,tp=-99999,magic=0, \
        comment="python script open sell"):
    print ("空单卖出限价：",price) 
    deviation = 30        
    request = { 
    "action": mt5.TRADE_ACTION_PENDING, 
    "symbol": symbol, 
    "volume": volume, 
    "type": mt5.ORDER_TYPE_SELL_LIMIT, 
    "price": price, 
    "deviation": 50, 
    "magic":magic, 
    "comment": comment, 
    "type_time": mt5.ORDER_TIME_GTC, 
    "type_filling": mt5.ORDER_FILLING_IOC,} 
    if sl!=-99999:
         request['sl']=sl
    if tp!=-99999:
         request['tp']=tp        
    result = mt5.order_send(request)
    reload_positions2(symbol=symbol)
    return result 


def sell_limit(price,symbol = "XAUUSD",volume=0.01,sl=-99999,tp=-99999,magic=0, \
        comment="python script open sell"):
    print ("空单卖出限价：",price) 
    deviation = 30        
    request = { 
    "action": mt5.TRADE_ACTION_PENDING, 
    "symbol": symbol, 
    "volume": volume, 
    "type": mt5.ORDER_TYPE_SELL_LIMIT, 
    "price": price, 
    "deviation": 50, 
    "magic": magic, 
    "comment": comment, 
    "type_time": mt5.ORDER_TIME_GTC, 
    "type_filling": mt5.ORDER_FILLING_IOC,} 
    if sl!=-99999:
         request['sl']=sl
    if tp!=-99999:
         request['tp']=tp         
    result = mt5.order_send(request)
    reload_positions2(symbol=symbol)
    return result 

def pingcang(id,magic=0,comment2="python script close"):
    global  positions_df,positions_total
    print('id=',id)
    positions_total=mt5.positions_total()
    if positions_total==0:
        return None
    df3=find_id(id)
    df3=df3.reset_index(level=None, drop=True ,col_level=0, col_fill='')
   
    if len(df3)<1:
        print('没有发现单号!')
        return None
    magic2=df3.loc[0,"magic"]
    symbol2 = df3.loc[0,"symbol"]
    type2=df3.loc[0,"type"]
    print('type2=',type2)
    if type2==1:
          type3=mt5.ORDER_TYPE_BUY
          price = mt5.symbol_info_tick(symbol2).ask
          print ("空单平仓价：",price)
    if type2==0:
          type3=mt5.ORDER_TYPE_SELL
          price = mt5.symbol_info_tick(symbol2).bid
          print ("多单平仓价：",price)
        
    lot = df3.loc[0,"volume"]
    
    deviation = 20
    request = { 
    "action": mt5.TRADE_ACTION_DEAL, 
    "symbol": symbol2, 
    "volume": lot, 
    "type":type3, 
    "position": int(id),
    "price": price, 
    "deviation": deviation, 
    "magic": magic, 
    "comment": comment2, 
    "type_time": mt5.ORDER_TIME_GTC, 
    "type_filling": mt5.ORDER_FILLING_IOC,} 
    #print(request)
    result1=None
    if magic==magic2 or magic ==0:
        print(request)
        result1 = mt5.order_send(request)
        print('bbb',result1)
    else:
        print('magic不正确!')
    return result1


def pingcang2(id2,magic=0,comment2="python script close"):
    global  positions_df,positions_total
    print('id=',id2)
    positions_total=mt5.positions_total()
    if positions_total==0:
        return None
    df3=find_id(id2)
    df3=df3.reset_index(level=None, drop=True ,col_level=0, col_fill='')
   
    if len(df3)<1:
        print('没有发现单号!')
        return None
    magic2=df3.loc[0,"magic"]
    symbol2 = df3.loc[0,"symbol"]
    type2=df3.loc[0,"type"]
    print('type2=',type2)
    type3=mt5.ORDER_TYPE_BUY
    if type2==1:
          type3=mt5.ORDER_TYPE_BUY
          price = mt5.symbol_info_tick(symbol2).ask
          print ("空单平仓价：",price)
    if type2==0:
          type3=mt5.ORDER_TYPE_SELL
          price = mt5.symbol_info_tick(symbol2).bid
          print ("多单平仓价：",price)
        
    lot = df3.loc[0,"volume"]
    
    deviation = 20
    request = { 
    "action": mt5.TRADE_ACTION_DEAL, 
    "symbol": symbol2, 
    "volume": lot, 
    "type":type3, 
    "position": int(id2),
    "price": price, 
    "deviation": deviation, 
    "magic": magic, 
    "comment": comment2, 
    "type_time": mt5.ORDER_TIME_GTC, 
    "type_filling": mt5.ORDER_FILLING_IOC,} 
    #print(request)
    result1=None
    if magic==magic2 or magic ==0:
        print(request)
        result1 = mt5.order_send(request)
        print('bbb',result1)
    else:
        print('magic不正确!')
    return result1

# 关闭指定单子函数
def one_close(ticket, comment2="python script close"):
    
    
    
    
    
        request = {
            "action": 1,
            "symbol": "XAUUSD",

            "volume": lot,
            "type": type,
            "position": ticket,
            "price": price,

            "deviation": 20,
            "magic": 123456,
            "comment": 'zzz',
            "type_time": mt5.ORDER_TIME_GTC,
            "type_filling": mt5.ORDER_FILLING_RETURN,
        }
        # 发送交易请求
        result = mt5.order_send(request)
        if result.retcode != mt5.TRADE_RETCODE_DONE:
            print("关闭失败: ", result.retcode)
            return 0
        else:
            if type:
                print("买单 关闭成功 单号: {}".format(ticket))
                print("")
            else:
                print("卖单 关闭成功 单号: {}".format(ticket))
                print("")
            return 1


#清仓
def qingcang(profit=-9999999,magic=0,symbol='',type2=-1):
    global  positions_df,positions_total
    if positions_total==0:
        return None
    tickets=list(positions_df['ticket'])
    for id2 in tickets:
        reload_positions2()
        df3=find_id(id2)
        if len(df3)<1:
            continue
        df3=df3.reset_index(level=None, drop=True ,col_level=0, col_fill='')
        profit2 = df3.loc[0,"profit"]
        symbol2 = df3.loc[0,"symbol"]
        type3 = df3.loc[0,"type"]
        if type3==type2 or type2==-1:
            if symbol =='':
                if profit2>=profit:
                    pingcang(id2,magic=magic)
            elif symbol2 ==symbol:
                if profit2>=profit:
                    pingcang(id2,magic=magic)            

#止赢
def zhiying(profit=-9999999,magic=0,down=999999999,symbol='',type2=-1):
    global  positions_df,positions_total
    if positions_total==0:
        return None
    tickets=list(positions_df['ticket'])
    for id2 in tickets:
        reload_positions2()
        df3=find_id(id2)
        if len(df3)<1:
            continue
        df3=df3.reset_index(level=None, drop=True ,col_level=0, col_fill='')
        profit2 = df3.loc[0,"profit"]
        symbol2 = df3.loc[0,"symbol"]
        type3 = df3.loc[0,"type"]
        if type3==type2 or type2==-1:
            if symbol =='':
                if profit2>=profit and profit2<down:
                    pingcang(id2,magic=magic)
            elif symbol2 ==symbol:
                if profit2>=profit and profit2<down:
                    pingcang(id2,magic=magic)
#止损
def zhisun(profit=-100,magic=0,up=-99999999,symbol='',type2=-1):
    global  positions_df,positions_total
    if positions_total==0:
        return None
    tickets=list(positions_df['ticket'])
    for id2 in tickets:
        reload_positions2()
        df3=find_id(id2)
        if len(df3)<1:
            continue
        df3=df3.reset_index(level=None, drop=True ,col_level=0, col_fill='')
        profit2 = df3.loc[0,"profit"]
        symbol2 = df3.loc[0,"symbol"]
        type3 = df3.loc[0,"type"]
        if type3==type2 or type2==-1:        
            if symbol =='':
                if profit2<=profit and profit2>up:
                    pingcang(id2,magic=magic)
            elif symbol2 ==symbol:
                if profit2<=profit and profit2>up:
                    pingcang(id2,magic=magic)

#止损2
def zhisun2(profit=-100,magic=0,up=-99999999,type2=-1,symbol=''):
    global  positions_df,positions_total
    if symbol=='':
        reload_positions2()
    else:
        reload_positions2(symbol=symbol)
    if positions_total==0:
        return None
    print(positions_df)
    tickets=list(positions_df['ticket'])
    for id2 in tickets:
        if symbol=='':
            reload_positions2()
        else:
            reload_positions2(symbol=symbol)
        df3=find_id(id2)
        if len(df3)<1:
            continue
        df3=df3.reset_index(level=None, drop=True ,col_level=0, col_fill='')
        profit2 = df3.loc[0,"profit"]
        type3 = df3.loc[0,"type"]
        symbol2 = df3.loc[0,"symbol"]
        if type3==type2 or type2==-1:          
            if symbol =='':
                if profit2<=profit and profit2>up:
                    pingcang(id2,magic=magic)
            elif symbol2 ==symbol:
                if profit2<=profit and profit2>up:
                    pingcang(id2,magic=magic)


#MT5行情数据转小白数据格式
def tohpdata(hq):
    df= pd.DataFrame(hq)
    df['time']=pd.to_datetime(df['time'], unit='s')
    df['date']=df['time']
    return df


#测试
if __name__ == '__main__':
    init()
    shutdown()